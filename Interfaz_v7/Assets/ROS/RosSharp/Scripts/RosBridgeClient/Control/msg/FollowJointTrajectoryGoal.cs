/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



using RosSharp.RosBridgeClient.MessageTypes.Trajectory;
using RosSharp.RosBridgeClient.MessageTypes.Std;

namespace RosSharp.RosBridgeClient.MessageTypes.Control
{
    public class FollowJointTrajectoryGoal : Message
    {
        public const string RosMessageName = "control_msgs/FollowJointTrajectoryGoal";

        //  ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
        //  The joint trajectory to follow
        public JointTrajectory trajectory { get; set; }
        //  Tolerances for the trajectory.  If the measured joint values fall
        //  outside the tolerances the trajectory goal is aborted.  Any
        //  tolerances that are not specified (by being omitted or set to 0) are
        //  set to the defaults for the action server (often taken from the
        //  parameter server).
        //  Tolerances applied to the joints as the trajectory is executed.  If
        //  violated, the goal aborts with error_code set to
        //  PATH_TOLERANCE_VIOLATED.
        public JointTolerance[] path_tolerance { get; set; }
        //  To report success, the joints must be within goal_tolerance of the
        //  final trajectory value.  The goal must be achieved by time the
        //  trajectory ends plus goal_time_tolerance.  (goal_time_tolerance
        //  allows some leeway in time, so that the trajectory goal can still
        //  succeed even if the joints reach the goal some time after the
        //  precise end time of the trajectory).
        // 
        //  If the joints are not within goal_tolerance after "trajectory finish
        //  time" + goal_time_tolerance, the goal aborts with error_code set to
        //  GOAL_TOLERANCE_VIOLATED
        public JointTolerance[] goal_tolerance { get; set; }
        public Duration goal_time_tolerance { get; set; }

        public FollowJointTrajectoryGoal()
        {
            this.trajectory = new JointTrajectory();
            this.path_tolerance = new JointTolerance[0];
            this.goal_tolerance = new JointTolerance[0];
            this.goal_time_tolerance = new Duration();
        }

        public FollowJointTrajectoryGoal(JointTrajectory trajectory, JointTolerance[] path_tolerance, JointTolerance[] goal_tolerance, Duration goal_time_tolerance)
        {
            this.trajectory = trajectory;
            this.path_tolerance = path_tolerance;
            this.goal_tolerance = goal_tolerance;
            this.goal_time_tolerance = goal_time_tolerance;
        }
    }
}
